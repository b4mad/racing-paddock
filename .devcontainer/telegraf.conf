[agent]
collection_jitter = "0s"
debug = true
flush_interval = "2s"
flush_jitter = "0s"
hostname = "$HOSTNAME"
interval = "1s"
logfile = ""
metric_batch_size = 1000
metric_buffer_limit = 10000
omit_hostname = false
precision = ""
quiet = false
round_interval = true

[[processors.enum]]
[[processors.enum.mapping]]
dest = "status_code"
field = "status"

[processors.enum.mapping.value_mappings]
critical = 3
healthy = 1
problem = 2

# CrewChief v1 configuration
[[inputs.mqtt_consumer]]
servers = ["tcp://mosquitto-mqtt:1883"]
topics = [
"crewchief/#"
]
username = "$USERNAME"
password = "$PASSWORD"
data_format = "json_v2"

[[inputs.mqtt_consumer.topic_parsing]]
topic = "crewchief/+/+/+/+/+/+"
tags = "_/_/SessionId/_/_/_/_"
[inputs.mqtt_consumer.topic_parsing.types]
# user = "string"
SessionId = "string"
# GameName = "string"
# TrackCode = "string"
# CarModel = "string"
# SessionTypeName = "string"

[[inputs.mqtt_consumer.json_v2]]
measurement_name = "telemetry_telemetry"
# dont use the timestamp from the message, since it is not reliable
# timestamp will be set to the time the message was received
# timestamp_path = "time"
# timestamp_format = "unix_ms"
# timestamp_timezone = "UTC"

[[inputs.mqtt_consumer.json_v2.object]]
path = "telemetry"
# timestamp_key = "time"
disable_prepend_keys = true
# tags = ["CurrentLap", "CarClass"]
included_keys = [
    "time",
    "Clutch",
    "Brake",
    "Throttle",
    "Handbrake",
    "SteeringAngle",
    "Rpms",
    "Gear",
    "SpeedMs",
    "DistanceRoundTrack",
    "WorldPosition_x",
    "WorldPosition_y",
    "WorldPosition_z",
    "CurrentLap",
    "CurrentLapTime",
#    "LapTimePrevious",
    "CurrentLapIsValid",
#    "PreviousLapWasValid",
#    "CarClass"
]

# now filter out some fields we don't need: CarClass
#[[processors.converter]]
#  [processors.converter.fields]
    # integer = ["CurrentLap", "Gear"]

[[outputs.postgresql]]
  connection = "host=db user=postgres password=postgres dbname=postgres sslmode=disable"
  create_templates = []
  add_column_templates = []
  tag_table_add_column_templates = []
  tagexclude = ["topic", "host"]

# [outputs.postgresql]
#   measurement = ["telemetry_telemetry"]
#   tag = ["SessionId"]
#   field = ["CurrentLap", "CurrentLapTime", "Clutch", "Brake", "Throttle", "Handbrake", "Gear", "CurrentLapIsValid", "DistanceRoundTrack", "Rpms", "SpeedMs", "SteeringAngle", "WorldPosition_x", "WorldPosition_y", "WorldPosition_z", "time"


#   table_template = "CREATE TABLE IF NOT EXISTS {table} ({fields}, time TIMESTAMPTZ)"
  log_level = "debug"

# [[outputs.influxdb_v2]]
# bucket = "racing"
# organization = "b4mad"
# token = "$INFLUX_TOKEN"
# urls = ["http://influxdb2:8086"]
# namepass = ["laps*"]

# # Configuration for the Prometheus client to spawn
# [[outputs.prometheus_client]]
# ## Address to listen on.
# listen = ":9090"
# namepass = ["internal_*"]
